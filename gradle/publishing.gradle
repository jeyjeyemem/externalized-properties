apply plugin: 'maven-publish'
apply plugin: 'signing'

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            pom {
                name = jar.archiveBaseName
                description = project.description
                packaging = 'jar'
                url = 'https://github.com/jeyjeyemem/externalized-properties'

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'jeyjeyemem'
                        name = 'Joel Jeremy M. Marquez'
                        email = 'joeljeremy.marquez@gmail.com'
                    }
                }

                scm {
                    connection = 'scm:git:https://github.com/jeyjeyemem/externalized-properties.git'
                    developerConnection = 'scm:git:https://github.com/jeyjeyemem/externalized-properties.git'
                    url = 'https://github.com/jeyjeyemem/externalized-properties'
                }
            }
        }
    }

    if (project.hasProperty('github-packages')) {
        repositories {
            maven {
                url = 'https://maven.pkg.github.com/jeyjeyemem/externalized-properties'
                name = 'github-packages'
                credentials {
                    username = System.getenv('GITHUB_ACTOR') ?: property('githubActor')
                    password = System.getenv('GITHUB_TOKEN') ?: property('githubToken')
                }
            }
        }
    }
}

if (project.hasProperty('release')) {
    // If release property is set, do not allow publishing with SNAPSHOT dependencies.
    Task checkSnapshotDependencies = project.tasks.create('checkSnapshotDependencies', {
        doFirst {
            def snapshots = project.configurations.findAll {
                it.canBeResolved
            }.resolvedConfiguration.resolvedArtifacts.flatten().findAll {
                it.moduleVersion.id.version.endsWith('-SNAPSHOT')
            }.unique()
            if (!snapshots.isEmpty()) {
                throw new GradleException(
                    "Cannot release with SNAPSHOT dependencies: $snapshots.moduleVersion"
                )
            }
        }
    })
    project.tasks.publish.dependsOn checkSnapshotDependencies
}

if (project.hasProperty('ossrh')) {
    signing {
        required rootProject.hasProperty('release')
        sign publishing.publications.mavenJava
    }
}