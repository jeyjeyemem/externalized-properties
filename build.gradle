plugins {
    id 'io.github.gradle-nexus.publish-plugin'
    id 'com.github.kt3k.coveralls'
    id 'io.snyk.gradle.plugin.snykplugin'
    id 'me.champeau.jmh' apply false
    id 'net.ltgt.errorprone' apply false
    id 'net.ltgt.nullaway' apply false
}

apply from: "${rootDir}/gradle/reporting.gradle"
apply from: "${rootDir}/gradle/coveralls.gradle"
apply from: "${rootDir}/gradle/snyk.gradle"

allprojects {
    group = 'io.github.joeljeremy7.externalizedproperties'

    def snapshotSuffix = rootProject.hasProperty('release') ? '' : '-SNAPSHOT'
    version = '1.0.0' + snapshotSuffix

    repositories {
        mavenLocal()
        mavenCentral()
    }
}

def javaProjects = subprojects.findAll { new File(it.projectDir, "src").exists() }

configure(javaProjects) {
    apply plugin: 'java-library'
    apply plugin: 'java-test-fixtures'

    apply from: "${rootDir}/gradle/dependencies.gradle"
    apply from: "${rootDir}/gradle/code-quality.gradle"
    apply from: "${rootDir}/gradle/publishing.gradle"

    testing {
        suites { 
            test { 
                useJUnitJupiter() 
            }
            integrationTest(JvmTestSuite) {
                testType = TestSuiteType.INTEGRATION_TEST
                targets {
                    all {
                        testTask.configure {
                            shouldRunAfter test
                        }
                    }
                }
            }
        }
    }

    java {
        // Use project path relative to the root project path as base name of archives. 
        // For nested projects such as resolvers, the ':' will be replaced by '-' 
        // i.e. resolvers:database -> resolvers-database.jar
        archivesBaseName = rootProject.relativeProjectPath(project.path).replace(':', '-')
        
        toolchain {
            languageVersion = JavaLanguageVersion.of(11)
        }
    }

    compileJava {
        options.release = 8
    }

    javadoc {
        configure(options) {
            tags(
                'apiNote:a:API Note:',
                'implSpec:a:Implementation Requirements:',
                'implNote:a:Implementation Note:'
            )
        }
    }
    
    // Do not publish test fixtures.
    components.java.withVariantsFromConfiguration(configurations.testFixturesApiElements) { skip() }
    components.java.withVariantsFromConfiguration(configurations.testFixturesRuntimeElements) { skip() }
}

if (project.hasProperty('ossrh')) {
    nexusPublishing {
        repositories {
            sonatype {
                nexusUrl = uri("https://s01.oss.sonatype.org/service/local/")
                snapshotRepositoryUrl = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")
                username = System.getenv('OSSRH_USERNAME') ?: property('ossrhUsername')
                password = System.getenv('OSSRH_PASSWORD') ?: property('ossrhPassword')
            }
        }
    }
}